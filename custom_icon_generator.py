"""
create_custom_icon.py - –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –ü–æ–ª–æ–∂–∏—Ç–µ –≤–∞—à–µ –ª–æ–≥–æ –≤ —Ñ–∞–π–ª "logo.png" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 512x512 –∏–ª–∏ –±–æ–ª—å—à–µ)
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python create_custom_icon.py
3. –ü–æ–ª—É—á–∏—Ç–µ icon.ico –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ PyInstaller
"""

from PIL import Image, ImageDraw, ImageOps
import os
import sys


def create_icon_from_logo(logo_path="logo.png", output_path="icon.ico"):
    """
    –°–æ–∑–¥–∞—ë—Ç .ico —Ñ–∞–π–ª –∏–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
    
    Args:
        logo_path: –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ª–æ–≥–æ (PNG, JPG, –∏ —Ç.–¥.)
        output_path: –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å .ico —Ñ–∞–π–ª
    """
    
    if not os.path.exists(logo_path):
        print(f"‚ùå –§–∞–π–ª {logo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–µ –ª–æ–≥–æ –∫–∞–∫ 'logo.png' –≤ —ç—Ç—É –ø–∞–ø–∫—É")
        print("2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 512x512 –ø–∏–∫—Å–µ–ª–µ–π –∏–ª–∏ –±–æ–ª—å—à–µ")
        print("3. –§–æ—Ä–º–∞—Ç: PNG (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é) –∏–ª–∏ JPG")
        print("\nüí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ª–æ–≥–æ, —Å–æ–∑–¥–∞–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ...")
        create_default_icon(output_path)
        return
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logo = Image.open(logo_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–≥–æ: {logo.size[0]}x{logo.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if logo.mode != 'RGBA':
            logo = logo.convert('RGBA')
        
        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è Windows –∏–∫–æ–Ω–∫–∏
        sizes = [16, 32, 48, 64, 128, 256]
        images = []
        
        for size in sizes:
            # –°–æ–∑–¥–∞—ë–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            
            # –í–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            logo_resized = logo.copy()
            logo_resized.thumbnail((size, size), Image.Resampling.LANCZOS)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            offset = ((size - logo_resized.size[0]) // 2,
                     (size - logo_resized.size[1]) // 2)
            img.paste(logo_resized, offset, logo_resized)
            
            images.append(img)
            print(f"  ‚úì –°–æ–∑–¥–∞–Ω —Ä–∞–∑–º–µ—Ä {size}x{size}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ .ico
        images[0].save(
            output_path,
            format='ICO',
            sizes=[(s, s) for s in sizes],
            append_images=images[1:]
        )
        
        print(f"\n‚úÖ –ò–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä—ã: {', '.join(str(s) for s in sizes)}")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ PyInstaller:")
        print(f"   pyinstaller --icon={output_path} ...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}")
        print("\nüí° –°–æ–∑–¥–∞–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É...")
        create_default_icon(output_path)


def create_default_icon(output_path="icon.ico"):
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ —Å—Ç–∏–ª–µ Telegram"""
    sizes = [16, 32, 48, 64, 128, 256]
    images = []
    
    for size in sizes:
        img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –°–∏–Ω–∏–π –∫—Ä—É–≥
        margin = size // 8
        draw.ellipse(
            [margin, margin, size - margin, size - margin],
            fill='#27B0FF',
            outline=None
        )
        
        # –ë–µ–ª—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (—Å—Ç—Ä–µ–ª–∫–∞)
        triangle_margin = size // 4
        points = [
            (triangle_margin, triangle_margin),
            (size - triangle_margin, size // 2),
            (triangle_margin + size // 8, size // 2 + size // 8),
            (triangle_margin, size - triangle_margin),
            (triangle_margin - size // 16, size // 2 + size // 16),
        ]
        draw.polygon(points, fill='#FFFFFF')
        
        images.append(img)
    
    images[0].save(
        output_path,
        format='ICO',
        sizes=[(s, s) for s in sizes],
        append_images=images[1:]
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞: {output_path}")


def create_logo_backup():
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –ª–æ–≥–æ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        if os.path.exists("logo.png"):
            logo = Image.open("logo.png")
        else:
            # –°–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ª–æ–≥–æ
            logo = Image.new('RGBA', (256, 256), (0, 0, 0, 0))
            draw = ImageDraw.Draw(logo)
            
            margin = 32
            draw.ellipse(
                [margin, margin, 256 - margin, 256 - margin],
                fill='#27B0FF',
                outline=None
            )
            
            triangle_margin = 64
            points = [
                (triangle_margin, triangle_margin),
                (256 - triangle_margin, 128),
                (triangle_margin + 32, 128 + 32),
                (triangle_margin, 256 - triangle_margin),
                (triangle_margin - 16, 128 + 16),
            ]
            draw.polygon(points, fill='#FFFFFF')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–ª—è GUI
        logo.save("logo_256.png")
        
        logo_64 = logo.copy()
        logo_64.thumbnail((64, 64), Image.Resampling.LANCZOS)
        logo_64.save("logo_64.png")
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –ª–æ–≥–æ –¥–ª—è GUI:")
        print("   - logo_256.png (–¥–ª—è –∑–∞—Å—Ç–∞–≤–∫–∏)")
        print("   - logo_64.png (–¥–ª—è –∏–∫–æ–Ω–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –ª–æ–≥–æ: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("  –°–û–ó–î–ê–ù–ò–ï –ò–ö–û–ù–ö–ò –î–õ–Ø TELEGRAM EXPORT STUDIO")
    print("=" * 60)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–æ
    if os.path.exists("logo.png"):
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–æ: logo.png")
        create_icon_from_logo()
    else:
        print("‚ÑπÔ∏è  –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("\nüìù –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë –ª–æ–≥–æ:")
        print("1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ 'logo.png'")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        print("\n–°–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É...\n")
        create_default_icon()
    
    print()
    create_logo_backup()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ì–û–¢–û–í–û!")
    print("=" * 60)
